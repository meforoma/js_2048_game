{"version":3,"sources":["scripts/main.js"],"names":["gameField","document","querySelector","buttonStart","messageStart","messageWin","messageLose","displayScore","winScore","gameFieldWidth","playerScore","blankGameGrid","gameGrid","handleLose","flat","some","tile","classList","remove","add","removeEventListener","movesController","handleWin","includes","innerText","randomNumber","Math","floor","random","fillRandomTile","row","col","fillGrid","map","rowCount","_","cellCount","rows","cells","tileValue","startGame","addEventListener","restartGame","duplicateGameGrid","JSON","parse","stringify","compareArrays","newArr","prevArr","flipGridVertical","reverse","spinGrid","newGrid","colCount","slideRight","notEmptyTiles","filter","emptyTiles","Array","length","fill","concat","mergeTiles","arr","i","makeMove","keypress","undoFlip","undoSpin","preMergeGrid","preUndoGridsCompare","ev","key"],"mappings":"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","file":"main.b2b653ee.js","sourceRoot":"..\\src","sourcesContent":["// /* eslint-disable no-unused-vars */\n'use strict';\n\n// #region initialize variables\nconst gameField = document.querySelector('.game-field');\nconst buttonStart = document.querySelector('.start');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\nconst displayScore = document.querySelector('.game-score');\n\nconst winScore = 2048;\nconst gameFieldWidth = 4;\nlet playerScore = 0;\n\nconst blankGameGrid = () => {\n  return [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n};\n\nlet gameGrid = blankGameGrid();\n// #endregion\n\n// #region handle win and lose\nconst handleLose = () => {\n  const hasEmptyTile = gameGrid.flat().some(tile => tile === 0);\n\n  if (!hasEmptyTile) {\n    messageLose.classList.remove('hidden');\n    messageWin.classList.add('hidden');\n\n    document.removeEventListener('keyup', movesController);\n  }\n};\n\nconst handleWin = () => {\n  const userWon = gameGrid.flat().includes(winScore);\n\n  if (userWon) {\n    messageWin.classList.remove('hidden');\n    buttonStart.classList.remove('restart');\n    buttonStart.classList.add('start');\n    buttonStart.innerText = 'Start';\n\n    gameGrid = blankGameGrid();\n    document.removeEventListener('keyup', movesController);\n  }\n};\n// #endregion\n\n// #region game start : display buttons, messages, fillGrid\n// fill helpers\nconst randomNumber = () => {\n  return Math.floor(Math.random() * gameFieldWidth);\n};\n\nconst fillRandomTile = () => {\n  const [row, col] = [\n    randomNumber(),\n    randomNumber(),\n  ];\n\n  if (!gameGrid[row][col]) {\n    gameGrid[row][col] = Math.random() > 0.9 ? 4 : 2;\n    handleLose();\n  } else {\n    fillRandomTile();\n  }\n};\n\nconst fillGrid = () => {\n  gameGrid.map((row, rowCount) => row.map((_, cellCount) => {\n    const tile = gameField.rows[rowCount].cells[cellCount];\n    const tileValue = gameGrid[rowCount][cellCount];\n\n    tile.classList = ('field-cell');\n    tile.innerText = tileValue;\n\n    tileValue > 0\n      ? tile.classList.add('field-cell--' + tileValue)\n      : tile.innerText = '';\n  }));\n};\n\n// start logic\nconst startGame = () => {\n  messageStart.classList.add('hidden');\n  buttonStart.classList.remove('start');\n  buttonStart.classList.add('restart');\n  buttonStart.innerText = 'Restart';\n\n  fillRandomTile();\n  fillRandomTile();\n  fillGrid();\n\n  document.addEventListener('keyup', movesController);\n};\n\nbuttonStart.addEventListener('click', startGame);\n\n// restart logic\nconst restartGame = () => {\n  gameGrid = blankGameGrid();\n  displayScore.innerText = 0;\n  playerScore = 0;\n  startGame();\n\n  messageWin.classList.add('hidden');\n  messageLose.classList.add('hidden');\n};\n\nbuttonStart.addEventListener('click', restartGame);\n// #endregion\n\n// #region actions: duplicate, compare, flip, spin, slide, mergeTiles\nfunction duplicateGameGrid() {\n  return JSON.parse(JSON.stringify(gameGrid));\n}\n\nconst compareArrays = (newArr, prevArr) => {\n  return JSON.stringify(newArr) === JSON.stringify(prevArr);\n};\n\n// flipVertical, spin\nconst flipGridVertical = () => {\n  return gameGrid.map(row => row.reverse());\n};\n\nfunction spinGrid() {\n  const newGrid = blankGameGrid();\n\n  newGrid.map((row, rowCount) => row.map((_, colCount) => {\n    newGrid[rowCount][colCount] = gameGrid[colCount][rowCount];\n  }));\n\n  return newGrid;\n}\n\n// slideRight, merge equal tiles\nfunction slideRight(row) {\n  const notEmptyTiles = row.filter(tile => tile > 0);\n  const emptyTiles = Array(gameFieldWidth - notEmptyTiles.length).fill(0);\n\n  return emptyTiles.concat(notEmptyTiles);\n}\n\nfunction mergeTiles(arr) {\n  for (let i = gameFieldWidth - 1; i > 0; i--) {\n    if (arr[i] === arr[i - 1]) {\n      arr[i] += arr[i - 1];\n      arr[i - 1] = 0;\n\n      playerScore += arr[i];\n    }\n  }\n\n  displayScore.innerText = playerScore;\n\n  return arr;\n}\n// #endregion\n\n// #region arrow keys handlers\nconst makeMove = (keypress) => {\n  let [undoFlip, undoSpin] = [false, false];\n\n  switch (keypress) {\n    case 'ArrowUp':\n      gameGrid = spinGrid();\n      gameGrid = flipGridVertical();\n      undoFlip = true;\n      undoSpin = true;\n      break;\n    case 'ArrowDown':\n      gameGrid = spinGrid();\n      undoSpin = true;\n      break;\n    case 'ArrowLeft':\n      gameGrid = flipGridVertical();\n      undoFlip = true;\n      break;\n    default:\n      break;\n  };\n\n  const preMergeGrid = duplicateGameGrid();\n\n  gameGrid = gameGrid.map(row => {\n    return slideRight(mergeTiles(slideRight(row)));\n  });\n\n  const preUndoGridsCompare = compareArrays(gameGrid, preMergeGrid);\n\n  if (undoFlip) {\n    gameGrid = flipGridVertical(gameGrid);\n  };\n\n  if (undoSpin) {\n    gameGrid = spinGrid();\n  };\n\n  if (!preUndoGridsCompare) {\n    fillRandomTile();\n  }\n};\n\nconst movesController = (ev) => {\n  makeMove(ev.key);\n  fillGrid();\n  handleWin();\n};\n// #endregion\n"]}